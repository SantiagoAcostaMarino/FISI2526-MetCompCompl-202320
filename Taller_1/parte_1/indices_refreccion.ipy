
#Importamos las librerias
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.patches as mpatches


#Punto 1.3

#Funciones auxiliares:
def leer_archivo_yml(ruta):
    """
    Esta funcion abre un archivo yml para poder leerlo como una cadena de texto.
    """
    try:
        with open(ruta, 'r') as archivo:
            contenido = archivo.read()
        return contenido
    except FileNotFoundError:
        return None
    
def contenido_logico(contenido):
    """
    Debido que que existen archivos yml que poseen en sus datos informacion diferente a numero se genera un error al crear las tuplas
    Esta funcion establece el inicio y el final de la infromacion de los archivos que vamos a usar en las tuplas
    """
    tuplas = []
    inicio = "data: |"
    fin = "\nSPECS"
    contenido = contenido.split(inicio)[1].split(fin)[0].strip()
    
    lineas = contenido.split("\n")
    for linea in lineas:
        valores = linea.split()
        if len(valores) == 2:
            try:
                valor1 = float(valores[0])
                valor2 = float(valores[1])
                tuplas.append((valor1, valor2))
            except ValueError:
                print(f"Error al convertir valores en la línea: '{linea}'") #Para saber en que linea esta el error o informacion difernete a numeros
    
    return tuplas

# Función principal
def crear_tuplas(ruta):
    contenido = leer_archivo_yml(ruta)
    if contenido is not None:
        tuplas = contenido_logico(contenido)
        return tuplas
    else:
        return []

# Ejemplo de uso
tuplas_2 = crear_tuplas(r"C:\Users\XIME\FISI2526-MetCompCompl-202320-Acosta---Campos\Taller_1\parte_1\archivos_yml\Mezclas\Aire.yml")


#Punto 1.4
#Desarollamos un funcion para poder desarollar las graficas de manera mas sencilla
def formato_grafica(titulo, ejex, ejey):
    plt.rcParams['axes.axisbelow'] = True

    plt.title(titulo, fontsize=10)
    plt.ylabel(ejey, fontsize=8)
    plt.xlabel(ejex, fontsize=8)

    plt.tick_params(direction='out', length=5, width=0.75, grid_alpha=0.3)
    plt.xticks(rotation=0)
    plt.minorticks_on()
    plt.ylim(None, None)
    plt.xlim(None, None)
    plt.grid(True)
    plt.legend(loc=True)
    plt.tight_layout;

#funcion de n_
def n_promedio(tupla):
    
    n_promedio = [ ] #Creamos una lista para sumar los valores de la tupla
    
    for tupla in tupla:
        
        n_promedio.append(tupla[1]) #Aqui añadimos los valores de la columna 2 del archivo yml
        datos = sum(n_promedio)
        cantidad_datos = len(n_promedio)
        respuesta =  datos/cantidad_datos
    return respuesta


n1 = n_promedio(tuplas_2)
print (n1)

def desviacion_estandar(tuplas):
    if len(tuplas) < 2:
        return 0  #En caso de poeseer una tupla con menos de 2 elementos

    # Calcular el promedio de los datos
    datos = []
    
    for tupla in tuplas:
        datos.append(tupla[1]) #Aqui añadimos los valores de la columna 2 del archivo yml
        respuesta =  n_promedio(tuplas)

        # Calcular la suma de las diferencias al cuadrado
        suma_diferencias_cuadrado = sum([(x - respuesta)**2 for x in datos])
        
        # Calcular la varianza
        varianza = suma_diferencias_cuadrado/ (len(datos))
        
        # Calculamos la desviación estándar sacando la raíz cuadrada de la varianza
        desviacion_estandar = np.sqrt(varianza)

    return desviacion_estandar



#Funcion de grafica
def refraccion_longitud (tupla, categoria, material):
    n_prom = n_promedio (tupla)
    desv = desviacion_estandar(tupla)
    titulo = (str(material)+ "\n" +
    " n_promedio: " + str(n_prom) + "\n" +
    "desviación estándar: " + str(desv))

    x = [x[0] for x in tupla]
    y = [x[1] for x in tupla]

    plt.plot(x, y, linestyle = "", marker = ".", color='dodgerblue', ms=10, label='Voc') 
    formato_grafica(titulo=titulo, ejex='"Longitud de onda (nm)"', ejey='Índice de refracción')

    plt.legend ()

    # Definimos en que ruta se va a guardar la grafica donde 
    ruta_guardado = os.path.join('C:\\Users\\XIME\\FISI2526-MetCompCompl-202320-Acosta---Campos\\Taller_1\\parte_1\\archivos_yml', categoria, material + ".png")
    
    plt.savefig(ruta_guardado, format='png') #Salvamos la imagen, es importante salvarla antes de mostrala o se genera un error en el que la imagen guardada esta en blanco

    plt.show()
    
    plt.close()  # Cierra la figura para liberar memoria

tupla_kapton = crear_tuplas(r"C:\Users\XIME\FISI2526-MetCompCompl-202320-Acosta---Campos\Taller_1\parte_1\archivos_yml\Plásticos Comerciales\Kapton.yml")
grafica_1 =refraccion_longitud(tupla_kapton, "Plásticos Comerciales", "Kapton")

tupla_NOA1348 = crear_tuplas(r"C:\Users\XIME\FISI2526-MetCompCompl-202320-Acosta---Campos\Taller_1\parte_1\archivos_yml\Adhesivos Ópticos\NOA1348.yml")
grafica_2 =refraccion_longitud(tupla_NOA1348, "Adhesivos Ópticos", "NOA1348")




#Punto 1.5
def graficas_generales(tupla):
    lista_elementos = pd.read_csv('./indices_refraccion.csv')
    
    for index, row in lista_elementos.iterrows():
        nombre = row['Nombre']
        categoria = row['Categoría']
        material = row['Material']
        
        # Ruta del archivo .yml
        ruta_yml = './' + categoria + '/' + material + '.yml'
        
        # Cargar el archivo .yml y crear la tupla
        # (Debes implementar la función para cargar y crear la tupla)
        tupla = cargar_archivo_yml_y_crear_tupla(ruta_yml)
        
        # Llamar a la función para graficar y guardar
        graficar_y_guardar(tupla, nombre, categoria, material)










